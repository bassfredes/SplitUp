// Mocks generated by Mockito 5.4.6 from annotations
// in splitup_application/test/services/connectivity_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:connectivity_plus/connectivity_plus.dart' as _i3;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i3.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<List<_i4.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i2.Stream<List<_i4.ConnectivityResult>>.empty(),
          )
          as _i2.Stream<List<_i4.ConnectivityResult>>);

  @override
  _i2.Future<List<_i4.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i2.Future<List<_i4.ConnectivityResult>>.value(
              <_i4.ConnectivityResult>[],
            ),
          )
          as _i2.Future<List<_i4.ConnectivityResult>>);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i2.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  _i2.Future<void> cancel() =>
      (super.noSuchMethod(
            Invocation.method(#cancel, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  void onData(void Function(T)? handleData) => super.noSuchMethod(
    Invocation.method(#onData, [handleData]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Function? handleError) => super.noSuchMethod(
    Invocation.method(#onError, [handleError]),
    returnValueForMissingStub: null,
  );

  @override
  void onDone(void Function()? handleDone) => super.noSuchMethod(
    Invocation.method(#onDone, [handleDone]),
    returnValueForMissingStub: null,
  );

  @override
  void pause([_i2.Future<void>? resumeSignal]) => super.noSuchMethod(
    Invocation.method(#pause, [resumeSignal]),
    returnValueForMissingStub: null,
  );

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Future<E> asFuture<E>([E? futureValue]) =>
      (super.noSuchMethod(
            Invocation.method(#asFuture, [futureValue]),
            returnValue:
                _i5.ifNotNull(
                  _i5.dummyValueOrNull<E>(
                    this,
                    Invocation.method(#asFuture, [futureValue]),
                  ),
                  (E v) => _i2.Future<E>.value(v),
                ) ??
                _FakeFuture_0<E>(
                  this,
                  Invocation.method(#asFuture, [futureValue]),
                ),
          )
          as _i2.Future<E>);
}
