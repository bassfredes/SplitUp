// Mocks generated by Mockito 5.4.6 from annotations
// in splitup_application/test/services/firestore_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i9;

import 'package:flutter/services.dart' as _i10;
import 'package:flutter/widgets.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:splitup_application/models/expense_model.dart' as _i5;
import 'package:splitup_application/models/group_model.dart' as _i4;
import 'package:splitup_application/models/settlement_model.dart' as _i6;
import 'package:splitup_application/models/user_model.dart' as _i7;
import 'package:splitup_application/services/cache_service.dart' as _i2;
import 'package:splitup_application/services/connectivity_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i2.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setData(String? key, dynamic data, {Duration? expiration}) =>
      (super.noSuchMethod(
            Invocation.method(#setData, [key, data], {#expiration: expiration}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  dynamic getData(String? key, {bool? bypassExpiration = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #getData,
          [key],
          {#bypassExpiration: bypassExpiration},
        ),
      );

  @override
  bool hasValidData(String? key, {bool? bypassOverride = false}) =>
      (super.noSuchMethod(
            Invocation.method(
              #hasValidData,
              [key],
              {#bypassOverride: bypassOverride},
            ),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<void> removeData(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#removeData, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeKeysWithPattern(String? pattern) =>
      (super.noSuchMethod(
            Invocation.method(#removeKeysWithPattern, [pattern]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cacheGroups(List<_i4.GroupModel>? groups, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#cacheGroups, [groups, userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  List<_i4.GroupModel>? getGroupsFromCache(String? userId) =>
      (super.noSuchMethod(Invocation.method(#getGroupsFromCache, [userId]))
          as List<_i4.GroupModel>?);

  @override
  _i3.Future<void> cacheExpenses(
    List<_i5.ExpenseModel>? expenses,
    String? groupId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheExpenses, [expenses, groupId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  List<_i5.ExpenseModel>? getExpensesFromCache(String? groupId) =>
      (super.noSuchMethod(Invocation.method(#getExpensesFromCache, [groupId]))
          as List<_i5.ExpenseModel>?);

  @override
  _i3.Future<void> cacheSettlements(
    List<_i6.SettlementModel>? settlements,
    String? groupId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheSettlements, [settlements, groupId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  List<_i6.SettlementModel>? getSettlementsFromCache(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#getSettlementsFromCache, [groupId]),
          )
          as List<_i6.SettlementModel>?);

  @override
  _i3.Future<void> cacheUsers(List<_i7.UserModel>? users) =>
      (super.noSuchMethod(
            Invocation.method(#cacheUsers, [users]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i7.UserModel? getUserFromCache(String? userId) =>
      (super.noSuchMethod(Invocation.method(#getUserFromCache, [userId]))
          as _i7.UserModel?);

  @override
  List<_i7.UserModel>? getUsersFromCache(List<String>? userIds) =>
      (super.noSuchMethod(Invocation.method(#getUsersFromCache, [userIds]))
          as List<_i7.UserModel>?);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i8.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasConnection =>
      (super.noSuchMethod(Invocation.getter(#hasConnection), returnValue: false)
          as bool);

  @override
  _i3.Stream<bool> get connectionStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStream),
            returnValue: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);

  @override
  _i3.Future<void> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void didChangeAppLifecycleState(_i9.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(#didChangeAppLifecycleState, [state]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> didPopRoute() =>
      (super.noSuchMethod(
            Invocation.method(#didPopRoute, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  bool handleStartBackGesture(_i10.PredictiveBackEvent? backEvent) =>
      (super.noSuchMethod(
            Invocation.method(#handleStartBackGesture, [backEvent]),
            returnValue: false,
          )
          as bool);

  @override
  void handleUpdateBackGestureProgress(_i10.PredictiveBackEvent? backEvent) =>
      super.noSuchMethod(
        Invocation.method(#handleUpdateBackGestureProgress, [backEvent]),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
    Invocation.method(#handleCommitBackGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
    Invocation.method(#handleCancelBackGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> didPushRoute(String? route) =>
      (super.noSuchMethod(
            Invocation.method(#didPushRoute, [route]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> didPushRouteInformation(
    _i11.RouteInformation? routeInformation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#didPushRouteInformation, [routeInformation]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void didChangeMetrics() => super.noSuchMethod(
    Invocation.method(#didChangeMetrics, []),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
    Invocation.method(#didChangeTextScaleFactor, []),
    returnValueForMissingStub: null,
  );

  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
    Invocation.method(#didChangePlatformBrightness, []),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeLocales(List<_i9.Locale>? locales) => super.noSuchMethod(
    Invocation.method(#didChangeLocales, [locales]),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeViewFocus(_i9.ViewFocusEvent? event) => super.noSuchMethod(
    Invocation.method(#didChangeViewFocus, [event]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i9.AppExitResponse> didRequestAppExit() =>
      (super.noSuchMethod(
            Invocation.method(#didRequestAppExit, []),
            returnValue: _i3.Future<_i9.AppExitResponse>.value(
              _i9.AppExitResponse.exit,
            ),
          )
          as _i3.Future<_i9.AppExitResponse>);

  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
    Invocation.method(#didHaveMemoryPressure, []),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
    Invocation.method(#didChangeAccessibilityFeatures, []),
    returnValueForMissingStub: null,
  );
}
